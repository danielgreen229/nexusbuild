{"version":3,"file":"template-CzstXKle.js","sources":["../../../../stores/template.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { API } from '~/config'\n\nfunction buildQuery(params = {}) {\n  const qs = Object.entries(params)\n    .filter(([, v]) => v !== undefined && v !== null && v !== '')\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n    .join('&')\n  return qs ? `?${qs}` : ''\n}\n\nexport const useTemplateStore = defineStore('template', {\n  state: () => ({\n    // статус загрузки / ошибки\n    loading: false,\n    error: null,\n\n    // основной набор данных\n    templates: [],        // массив шаблонов (для offset-пагинации и initial load)\n    current: null,        // текущий шаблон (getTemplateById / getTemplateByUid)\n\n    // offset pagination\n    total: 0,\n    page: 1,\n    perPage: 20,\n\n    // cursor (infinite) pagination\n    nextCursor: null,     // { lastCreatedAt, lastId } или null\n    hasMore: true,        // удобно для infinite scroll\n\n    // тестовый маршрут ответ (если нужен)\n    testResult: null,\n  }),\n  getters: {\n    isLoading: (state) => state.loading,\n    hasError: (state) => !!state.error,\n    templatesCount: (state) => state.templates.length,\n    canLoadMore: (state) => state.hasMore,\n    currentTemplate: (state) => state.current,\n  },\n  actions: {\n    // Внутренняя общая функция запроса\n    async _request({ method = 'GET', path = '', params = null, body = null } = {}) {\n      this.loading = true\n      this.error = null\n\n      try {\n        const qs = params ? buildQuery(params) : ''\n        const url = `${API.fullUrl}/template${path}${qs}`\n\n        const opts = {\n          method,\n          headers: {}\n        }\n\n        if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n          opts.headers['Content-Type'] = 'application/json'\n          opts.body = JSON.stringify(body)\n        }\n\n        const res = await fetch(url, opts)\n\n        let json = null\n        try {\n          json = await res.json()\n        } catch (e) {\n          if (!res.ok) throw new Error(res.statusText || 'Network error')\n          return null\n        }\n\n        if (!res.ok) {\n          const msg = (json && (json.description || json.data)) ? (json.description || json.data) : (res.statusText || `HTTP ${res.status}`)\n          throw new Error(msg)\n        }\n\n        if (json && typeof json === 'object' && ('status' in json)) {\n          if (String(json.status) === '200') return json.data\n          const msg = json.description || json.data || 'Server error'\n          throw new Error(msg)\n        }\n\n        return json\n      } catch (error) {\n        this.error = error.message || String(error)\n        throw error\n      } finally {\n        this.loading = false\n      }\n    },\n\n    /* -------------------------\n       Тест\n    ------------------------- */\n    async test() {\n      const data = await this._request({ method: 'GET', path: '/test' })\n      this.testResult = data\n      return data\n    },\n\n    /* -------------------------\n       CREATE\n    ------------------------- */\n    async createTemplate(payload) {\n      const created = await this._request({ method: 'POST', path: '/', body: payload })\n      // Добавляем новый шаблон в начало списка (чтобы был видим при offset-пагинации)\n      if (created) {\n        // Если сервер вернул объект шаблона в created\n        if (created.id) {\n          this.templates.unshift(created)\n          this.total = Number(this.total || 0) + 1\n        }\n      }\n      return created\n    },\n\n    /* -------------------------\n       READ by id / uid\n    ------------------------- */\n    async getTemplateById(id) {\n      if (!id) throw new Error('id is required')\n      const row = await this._request({ method: 'GET', path: `/${encodeURIComponent(id)}` })\n      this.current = row\n      return row\n    },\n\n    async getTemplateByUid(uid) {\n      if (!uid) throw new Error('uid is required')\n      const row = await this._request({ method: 'GET', path: `/uid/${encodeURIComponent(uid)}` })\n      this.current = row\n      return row\n    },\n\n    /* -------------------------\n       UPDATE\n    ------------------------- */\n    async updateTemplate(id, payload) {\n      if (!id) throw new Error('id is required')\n      const updated = await this._request({ method: 'PUT', path: `/${encodeURIComponent(id)}`, body: payload })\n      // Обновим список и current если нужно\n      if (updated) {\n        const idx = this.templates.findIndex(t => t.id === updated.id)\n        if (idx !== -1) {\n          this.templates.splice(idx, 1, updated)\n        }\n        if (this.current && this.current.id === updated.id) {\n          this.current = updated\n        }\n      }\n      return updated\n    },\n\n    /* -------------------------\n       DELETE\n    ------------------------- */\n    async deleteTemplate(id) {\n      if (!id) throw new Error('id is required')\n      const res = await this._request({ method: 'DELETE', path: `/${encodeURIComponent(id)}` })\n      // Если удаление успешно — убираем из списка и уменьшаем total\n      const idx = this.templates.findIndex(t => t.id === Number(id))\n      if (idx !== -1) {\n        this.templates.splice(idx, 1)\n        this.total = Math.max(0, (Number(this.total || 0) - 1))\n      }\n      if (this.current && this.current.id === Number(id)) {\n        this.current = null\n      }\n      return res\n    },\n\n    /* -------------------------\n       OFFSET pagination\n       options: { page, perPage, filters }\n    ------------------------- */\n    async listTemplates({ page = 1, perPage = 20, filters = {} } = {}) {\n\t\t  const params = {\n\t\t    page,\n\t\t    perPage,\n\t\t    type: filters.type,\n\t\t    popular: typeof filters.popular !== 'undefined' ? (filters.popular ? '1' : '0') : undefined,\n\t\t    min_price: filters.min_price,\n\t\t    max_price: filters.max_price,\n\t\t    search: filters.search,\n\t\t    uid: filters.uid\n\t\t  }\n\n\t\t  const result = await this._request({ method: 'GET', path: '/', params })\n\n\t\t  // ---- Robust handling of different server shapes ----\n\t\t  // Possible shapes:\n\t\t  // 1) { rows: [...], total, page, perPage }\n\t\t  // 2) { data: { rows: [...], total, page, perPage } }\n\t\t  // 3) [...] (simple array)\n\t\t  // 4) null / unexpected\n\t\t  let rows = []\n\t\t  let total = 0\n\t\t  let respPage = page\n\t\t  let respPerPage = perPage\n\n\t\t  if (Array.isArray(result)) {\n\t\t    rows = result\n\t\t    total = result.length\n\t\t  } else if (result && typeof result === 'object') {\n\t\t    if (Array.isArray(result.rows)) {\n\t\t      rows = result.rows\n\t\t      total = Number(result.total ?? rows.length)\n\t\t      respPage = Number(result.page ?? page)\n\t\t      respPerPage = Number(result.perPage ?? perPage)\n\t\t    } else if (result.data && typeof result.data === 'object') {\n\t\t      // nested data\n\t\t      const d = result.data\n\t\t      if (Array.isArray(d.rows)) {\n\t\t        rows = d.rows\n\t\t        total = Number(d.total ?? rows.length)\n\t\t        respPage = Number(d.page ?? page)\n\t\t        respPerPage = Number(d.perPage ?? perPage)\n\t\t      } else if (Array.isArray(d)) {\n\t\t        rows = d\n\t\t        total = d.length\n\t\t      }\n\t\t    } else {\n\t\t      // maybe the server returned an object that is actually the array-like result\n\t\t      // try to find first array field\n\t\t      const firstArrayField = Object.values(result).find(v => Array.isArray(v))\n\t\t      if (firstArrayField) {\n\t\t        rows = firstArrayField\n\t\t        total = Number(result.total ?? rows.length)\n\t\t      }\n\t\t    }\n\t\t  }\n\n\t\t  // debug log (можно отключить в production)\n\t\t  if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n\t\t    // eslint-disable-next-line no-console\n\t\t    console.debug('[template.store] listTemplates result:', { raw: result, rowsCount: rows.length, total })\n\t\t  }\n\n\t\t  this.templates = rows\n\t\t  this.total = Number(total || 0)\n\t\t  this.page = respPage\n\t\t  this.perPage = respPerPage\n\t\t  // reset cursor-related state\n\t\t  this.nextCursor = null\n\t\t  this.hasMore = (this.templates.length < this.total)\n\n\t\t  return result\n\t\t},\n\n    /* -------------------------\n       INFINITE (cursor) pagination\n       options: { limit, lastCreatedAt, lastId, order, filters }\n       IMPORTANT: если lastCreatedAt/lastId не передать — будет начальный load (replace),\n                  если передать — будет append (load more).\n    ------------------------- */\n    async listTemplatesInfinite({ limit = 20, lastCreatedAt = null, lastId = null, order = 'desc', filters = {} } = {}) {\n      const params = {\n        limit,\n        lastCreatedAt,\n        lastId,\n        order,\n        type: filters.type,\n        popular: typeof filters.popular !== 'undefined' ? (filters.popular ? '1' : '0') : undefined,\n        min_price: filters.min_price,\n        max_price: filters.max_price,\n        search: filters.search,\n        uid: filters.uid\n      }\n\n      const result = await this._request({ method: 'GET', path: '/infinite', params })\n      // result: { rows, nextCursor }\n\n      const rows = (result && Array.isArray(result.rows)) ? result.rows : []\n      const nextCursor = result && result.nextCursor ? result.nextCursor : null\n\n      if (!lastCreatedAt && !lastId) {\n        // initial load — replace array\n        this.templates = rows\n      } else {\n        // load more — append\n        this.templates = this.templates.concat(rows)\n      }\n\n      this.nextCursor = nextCursor\n      this.hasMore = !!nextCursor && (rows.length > 0)\n      return result\n    },\n\n    /* -------------------------\n       Search by title\n    ------------------------- */\n    async searchByTitle(q, limit = 20) {\n      if (!q) throw new Error('query q is required')\n      const params = { q, limit }\n      const rows = await this._request({ method: 'GET', path: '/search/title', params })\n      // возвращаем результат не модифицируя основной templates, но можно по желанию сохранить\n      return rows\n    },\n\n    /* -------------------------\n       Утилиты: сброс состояния / очистка ошибок\n    ------------------------- */\n    clearError() {\n      this.error = null\n    },\n\n    reset() {\n      this.loading = false\n      this.error = null\n      this.templates = []\n      this.current = null\n      this.total = 0\n      this.page = 1\n      this.perPage = 20\n      this.nextCursor = null\n      this.hasMore = true\n      this.testResult = null\n    }\n  }\n})\n"],"names":[],"mappings":";;;;AAGA,SAAS,WAAW,SAAS,IAAI;AAC/B,QAAM,KAAK,OAAO,QAAQ,MAAM,EAC7B,OAAO,CAAC,CAAA,EAAG,CAAC,MAAM,MAAM,UAAa,MAAM,QAAQ,MAAM,EAAE,EAC3D,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,mBAAmB,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,EAAE,EACnE,KAAK,GAAG;AACX,SAAO,KAAK,IAAI,EAAE,KAAK;AACzB;AAEO,MAAM,mBAAmB,YAAY,YAAY;AAAA,EACtD,OAAO,OAAO;AAAA;AAAA,IAEZ,SAAS;AAAA,IACT,OAAO;AAAA;AAAA,IAGP,WAAW,CAAA;AAAA;AAAA,IACX,SAAS;AAAA;AAAA;AAAA,IAGT,OAAO;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA;AAAA,IAGT,YAAY;AAAA;AAAA,IACZ,SAAS;AAAA;AAAA;AAAA,IAGT,YAAY;AAAA,EAAA;AAAA,EAEd,SAAS;AAAA,IACP,WAAW,CAAC,UAAU,MAAM;AAAA,IAC5B,UAAU,CAAC,UAAU,CAAC,CAAC,MAAM;AAAA,IAC7B,gBAAgB,CAAC,UAAU,MAAM,UAAU;AAAA,IAC3C,aAAa,CAAC,UAAU,MAAM;AAAA,IAC9B,iBAAiB,CAAC,UAAU,MAAM;AAAA,EAAA;AAAA,EAEpC,SAAS;AAAA;AAAA,IAEP,MAAM,SAAS,EAAE,SAAS,OAAO,OAAO,IAAI,SAAS,MAAM,OAAO,KAAA,IAAS,CAAA,GAAI;AAC7E,WAAK,UAAU;AACf,WAAK,QAAQ;AAEb,UAAI;AACF,cAAM,KAAK,SAAS,WAAW,MAAM,IAAI;AACzC,cAAM,MAAM,GAAG,IAAI,OAAO,YAAY,IAAI,GAAG,EAAE;AAE/C,cAAM,OAAO;AAAA,UACX;AAAA,UACA,SAAS,CAAA;AAAA,QAAC;AAGZ,YAAI,SAAS,WAAW,UAAU,WAAW,SAAS,WAAW,UAAU;AACzE,eAAK,QAAQ,cAAc,IAAI;AAC/B,eAAK,OAAO,KAAK,UAAU,IAAI;AAAA,QACjC;AAEA,cAAM,MAAM,MAAM,MAAM,KAAK,IAAI;AAEjC,YAAI,OAAO;AACX,YAAI;AACF,iBAAO,MAAM,IAAI,KAAA;AAAA,QACnB,SAAS,GAAG;AACV,cAAI,CAAC,IAAI,GAAI,OAAM,IAAI,MAAM,IAAI,cAAc,eAAe;AAC9D,iBAAO;AAAA,QACT;AAEA,YAAI,CAAC,IAAI,IAAI;AACX,gBAAM,MAAO,SAAS,KAAK,eAAe,KAAK,QAAU,KAAK,eAAe,KAAK,OAAS,IAAI,cAAc,QAAQ,IAAI,MAAM;AAC/H,gBAAM,IAAI,MAAM,GAAG;AAAA,QACrB;AAEA,YAAI,QAAQ,OAAO,SAAS,YAAa,YAAY,MAAO;AAC1D,cAAI,OAAO,KAAK,MAAM,MAAM,cAAc,KAAK;AAC/C,gBAAM,MAAM,KAAK,eAAe,KAAK,QAAQ;AAC7C,gBAAM,IAAI,MAAM,GAAG;AAAA,QACrB;AAEA,eAAO;AAAA,MACT,SAAS,OAAO;AACd,aAAK,QAAQ,MAAM,WAAW,OAAO,KAAK;AAC1C,cAAM;AAAA,MACR,UAAA;AACE,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,OAAO;AACX,YAAM,OAAO,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,SAAS;AACjE,WAAK,aAAa;AAClB,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,eAAe,SAAS;AAC5B,YAAM,UAAU,MAAM,KAAK,SAAS,EAAE,QAAQ,QAAQ,MAAM,KAAK,MAAM,QAAA,CAAS;AAEhF,UAAI,SAAS;AAEX,YAAI,QAAQ,IAAI;AACd,eAAK,UAAU,QAAQ,OAAO;AAC9B,eAAK,QAAQ,OAAO,KAAK,SAAS,CAAC,IAAI;AAAA,QACzC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,gBAAgB,IAAI;AACxB,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,gBAAgB;AACzC,YAAM,MAAM,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,IAAI,mBAAmB,EAAE,CAAC,IAAI;AACrF,WAAK,UAAU;AACf,aAAO;AAAA,IACT;AAAA,IAEA,MAAM,iBAAiB,KAAK;AAC1B,UAAI,CAAC,IAAK,OAAM,IAAI,MAAM,iBAAiB;AAC3C,YAAM,MAAM,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,QAAQ,mBAAmB,GAAG,CAAC,IAAI;AAC1F,WAAK,UAAU;AACf,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,eAAe,IAAI,SAAS;AAChC,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,gBAAgB;AACzC,YAAM,UAAU,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,IAAI,mBAAmB,EAAE,CAAC,IAAI,MAAM,SAAS;AAExG,UAAI,SAAS;AACX,cAAM,MAAM,KAAK,UAAU,UAAU,OAAK,EAAE,OAAO,QAAQ,EAAE;AAC7D,YAAI,QAAQ,IAAI;AACd,eAAK,UAAU,OAAO,KAAK,GAAG,OAAO;AAAA,QACvC;AACA,YAAI,KAAK,WAAW,KAAK,QAAQ,OAAO,QAAQ,IAAI;AAClD,eAAK,UAAU;AAAA,QACjB;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,eAAe,IAAI;AACvB,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,gBAAgB;AACzC,YAAM,MAAM,MAAM,KAAK,SAAS,EAAE,QAAQ,UAAU,MAAM,IAAI,mBAAmB,EAAE,CAAC,IAAI;AAExF,YAAM,MAAM,KAAK,UAAU,UAAU,OAAK,EAAE,OAAO,OAAO,EAAE,CAAC;AAC7D,UAAI,QAAQ,IAAI;AACd,aAAK,UAAU,OAAO,KAAK,CAAC;AAC5B,aAAK,QAAQ,KAAK,IAAI,GAAI,OAAO,KAAK,SAAS,CAAC,IAAI,CAAE;AAAA,MACxD;AACA,UAAI,KAAK,WAAW,KAAK,QAAQ,OAAO,OAAO,EAAE,GAAG;AAClD,aAAK,UAAU;AAAA,MACjB;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,MAAM,cAAc,EAAE,OAAO,GAAG,UAAU,IAAI,UAAU,GAAC,IAAM,IAAI;AACnE,YAAM,SAAS;AAAA,QACb;AAAA,QACA;AAAA,QACA,MAAM,QAAQ;AAAA,QACd,SAAS,OAAO,QAAQ,YAAY,cAAe,QAAQ,UAAU,MAAM,MAAO;AAAA,QAClF,WAAW,QAAQ;AAAA,QACnB,WAAW,QAAQ;AAAA,QACnB,QAAQ,QAAQ;AAAA,QAChB,KAAK,QAAQ;AAAA,MAAA;AAGf,YAAM,SAAS,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,KAAK,QAAQ;AAQvE,UAAI,OAAO,CAAA;AACX,UAAI,QAAQ;AACZ,UAAI,WAAW;AACf,UAAI,cAAc;AAElB,UAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,eAAO;AACP,gBAAQ,OAAO;AAAA,MACjB,WAAW,UAAU,OAAO,WAAW,UAAU;AAC/C,YAAI,MAAM,QAAQ,OAAO,IAAI,GAAG;AAC9B,iBAAO,OAAO;AACd,kBAAQ,OAAO,OAAO,SAAS,KAAK,MAAM;AAC1C,qBAAW,OAAO,OAAO,QAAQ,IAAI;AACrC,wBAAc,OAAO,OAAO,WAAW,OAAO;AAAA,QAChD,WAAW,OAAO,QAAQ,OAAO,OAAO,SAAS,UAAU;AAEzD,gBAAM,IAAI,OAAO;AACjB,cAAI,MAAM,QAAQ,EAAE,IAAI,GAAG;AACzB,mBAAO,EAAE;AACT,oBAAQ,OAAO,EAAE,SAAS,KAAK,MAAM;AACrC,uBAAW,OAAO,EAAE,QAAQ,IAAI;AAChC,0BAAc,OAAO,EAAE,WAAW,OAAO;AAAA,UAC3C,WAAW,MAAM,QAAQ,CAAC,GAAG;AAC3B,mBAAO;AACP,oBAAQ,EAAE;AAAA,UACZ;AAAA,QACF,OAAO;AAGL,gBAAM,kBAAkB,OAAO,OAAO,MAAM,EAAE,KAAK,CAAA,MAAK,MAAM,QAAQ,CAAC,CAAC;AACxE,cAAI,iBAAiB;AACnB,mBAAO;AACP,oBAAQ,OAAO,OAAO,SAAS,KAAK,MAAM;AAAA,UAC5C;AAAA,QACF;AAAA,MACF;AAQA,WAAK,YAAY;AACjB,WAAK,QAAQ,OAAO,SAAS,CAAC;AAC9B,WAAK,OAAO;AACZ,WAAK,UAAU;AAEf,WAAK,aAAa;AAClB,WAAK,UAAW,KAAK,UAAU,SAAS,KAAK;AAE7C,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQE,MAAM,sBAAsB,EAAE,QAAQ,IAAI,gBAAgB,MAAM,SAAS,MAAM,QAAQ,QAAQ,UAAU,CAAA,EAAC,IAAM,CAAA,GAAI;AAClH,YAAM,SAAS;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM,QAAQ;AAAA,QACd,SAAS,OAAO,QAAQ,YAAY,cAAe,QAAQ,UAAU,MAAM,MAAO;AAAA,QAClF,WAAW,QAAQ;AAAA,QACnB,WAAW,QAAQ;AAAA,QACnB,QAAQ,QAAQ;AAAA,QAChB,KAAK,QAAQ;AAAA,MAAA;AAGf,YAAM,SAAS,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,aAAa,QAAQ;AAG/E,YAAM,OAAQ,UAAU,MAAM,QAAQ,OAAO,IAAI,IAAK,OAAO,OAAO,CAAA;AACpE,YAAM,aAAa,UAAU,OAAO,aAAa,OAAO,aAAa;AAErE,UAAI,CAAC,iBAAiB,CAAC,QAAQ;AAE7B,aAAK,YAAY;AAAA,MACnB,OAAO;AAEL,aAAK,YAAY,KAAK,UAAU,OAAO,IAAI;AAAA,MAC7C;AAEA,WAAK,aAAa;AAClB,WAAK,UAAU,CAAC,CAAC,cAAe,KAAK,SAAS;AAC9C,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,MAAM,cAAc,GAAG,QAAQ,IAAI;AACjC,UAAI,CAAC,EAAG,OAAM,IAAI,MAAM,qBAAqB;AAC7C,YAAM,SAAS,EAAE,GAAG,MAAA;AACpB,YAAM,OAAO,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,MAAM,iBAAiB,QAAQ;AAEjF,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA,IAKA,aAAa;AACX,WAAK,QAAQ;AAAA,IACf;AAAA,IAEA,QAAQ;AACN,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,YAAY,CAAA;AACjB,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,OAAO;AACZ,WAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,UAAU;AACf,WAAK,aAAa;AAAA,IACpB;AAAA,EAAA;AAEJ,CAAC;"}